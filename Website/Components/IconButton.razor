@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq


@*DROP DOWN VERSION*@
@if (IsDropDownMode)
{
    <div class="dropdown @ExtraClass">
        @*extra class for dropdown direct to parent div*@
        <button style="@FinalCss" @ref="ElementReference" @onmouseover="OnMouseOver" @onclick="OnClickButton" class="@ButtonClassStr" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            @*only show icon if specified*@
            @if (IconName != null)
            {
                <span class="iconify" data-icon="@IconName" data-width="25" />
            }
            @ButtonText
        </button>
        <ul style="cursor: pointer;" class="dropdown-menu w-100"> @*auto match size with button width*@
            @DropDownList
        </ul>
    </div>
}
@*NORMAL BUTTON*@
else
{
    <button style="@FinalCss" @ref="ElementReference" @onmouseover="OnMouseOver" @onclick="OnClickButton" class="@ButtonClassStr">
        @*SPECIAL LITTLE EXTRA INFO TEXT*@
        @if (!string.IsNullOrEmpty(RetinaText))
        {
            <span style=" position: absolute; margin-top: -3px; margin-left: 35px; font-size: 6px; writing-mode: tb-rl; font-weight: 700; ">@RetinaText</span>
        }

        @*only show icon if specified*@
        @if (IconName != null)
        {
            <span class="iconify" data-icon="@IconName" data-width="25"/>
        }
        @ButtonText
    </button>

}



@*text below button*@
@if (ShowDelayWarning)
{
    <IconText FontColor="#8f8f8f" IconName="mdi:snail">Warning Slow</IconText>
}

@code {


    /// <summary>
    /// the final class list added to button elm generates based on the parameters set
    /// </summary>
    private string ButtonClassStr
    {
        get
        {
            //btn btn-outline-primary
            //btn btn-primary
            //add outline class if specified
            string compiledClass = "";
            compiledClass += (SmallSize ? "btn-sm " : ""); //remember space between class names
            compiledClass += (IsIconOnly ? "iconOnlyButton " : "");
            compiledClass += (FullWidth ? "w-100 " : "");
            compiledClass += (IsDropDownMode ? "dropdown-toggle " : ""); //drop down bootstrap class
            compiledClass += (IsIconTextButton ? "hstack gap-2 iconButton " : ""); //if only text than no extra classes
            compiledClass += $"btn" + (Outline ? $"-outline-{Color}" : $"-{Color}"); //colorStyle
            compiledClass += " btn "; //note: spaces so classes don't stick
            compiledClass += ExtraClass;

            return compiledClass;
        }
    }

    /// <summary>
    /// Bootstrap outline
    /// </summary>
    [Parameter]
    public bool Outline { get; set; } = false;

    /// <summary>
    /// adds align-self: self-end; which pushes it down bottom of parent
    /// </summary>
    [Parameter]
    public bool PlaceBottom { get; set; } = false;

    /// <summary>
    /// Text that will be displayed in button
    /// </summary>
    [Parameter]
    public string? ButtonText { get; set; }

    /// <summary>
    /// If true means no text provided so icon is made small by css class
    /// </summary>
    public bool IsIconOnly => string.IsNullOrEmpty(ButtonText);

    /// <summary>
    /// If true means text and icon provided
    /// </summary>
    public bool IsIconTextButton => !(string.IsNullOrEmpty(ButtonText)) && !(string.IsNullOrEmpty(IconName)); //button text not empty and icon name not empty

    [Parameter]
    public bool ShowDelayWarning { get; set; } = false;

    [Parameter]
    public bool SmallSize { get; set; } = false;

    /// <summary>
    /// Very small text next to button to give more info, visible only in high DPI screens
    /// </summary>
    [Parameter]
    public string RetinaText { get; set; } = "";

    /// <summary>
    /// Defaults to false, if true button will be 100% of parent by adding w-100
    /// </summary>
    [Parameter]
    public bool FullWidth { get; set; } = false;

    /// <summary>
    /// Bootstrap button color class
    /// default to : primary
    /// other:secondary,success,danger,...
    /// </summary>
    [Parameter]
    public string Color { get; set; } = "primary";

    /// <summary>
    /// Special icon name from icon-sets.iconify.design
    /// If not specified, icon automatically not set
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }

    /// <summary>
    /// If specified extra, added directly to button class attribute
    /// </summary>
    [Parameter]
    public string? ExtraClass { get; set; }


    /// <summary>
    /// Tooltip text
    /// </summary>
    [Parameter]
    public string? TooltipText { get; set; }


    /// <summary>
    /// Function that is called on click of button
    /// Note: using delegate so that can change function based on page mode
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    /// <summary>
    /// Drop down list contents placed in drop down button
    /// HTML
    /// </summary>
    [Parameter]
    public RenderFragment? DropDownList { get; set; }

    /// <summary>
    /// If Drop down list is provided then this turn true
    /// </summary>
    public bool IsDropDownMode => DropDownList != null;

    /// <summary>
    /// If URL is provided, on button click will navigate to URL
    /// </summary>
    [Parameter]
    public string? ClickUrl { get; set; } = "";

    /// <summary>
    /// if set is used, else will default
    /// </summary>
    [Parameter]
    public string FontWeight { get; set; } = "";

    /// <summary>
    /// if set is used, else will default
    /// </summary>
    [Parameter]
    public string FontSize { get; set; } = "";

    /// <summary>
    /// Checks if click URL has been specified
    /// </summary>
    public bool IsClickMode => !string.IsNullOrEmpty(ClickUrl);

    /// <summary>
    /// Related to ClickURL, if set true opens in new tab, default is false
    /// </summary>
    [Parameter]
    public bool OpenNewTab { get; set; } = false;

    /// <summary>
    /// will place text in center of true, default false
    /// </summary>
    [Parameter]
    public bool TextCenter { get; set; } = false;

    [Parameter]
    public ElementReference ElementReference { get; set; }


    /// <summary>
    /// if true will use Golden Ratio 60.1px
    /// default false
    /// </summary>
    [Parameter]
    public bool GoldRatioWidth { get; set; } = false;

    /// <summary>
    /// Computes the final css based on set variables
    /// </summary>
    private string FinalCss
    {
        get
        {
            var css = "";

            //use golden ration if specified
            css += GoldRatioWidth ? $" width:{GR.W60px} !important;" : "";
            css += PlaceBottom ? $" align-self: self-end !important;" : "";
            css += TextCenter ? $" place-content: center !important;" : "";
            css += !string.IsNullOrEmpty(FontWeight) ? $"font-weight: {FontWeight} !important;" : "";
            css += !string.IsNullOrEmpty(FontSize) ? $"font-size: {FontSize} !important;" : "";
            css += $" height:{GR.W37px};";
            css += $" width: fit-content;";

            return css;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //attach tooltip lib element if tooltip provided
            if (!string.IsNullOrEmpty(TooltipText))
            {
                await _jsRuntime.Tippy(ElementReference, new { content = this.TooltipText });
            }
        }
    }



    /// <summary>
    /// Default button click will send page to URL link if provided
    /// else exit silently
    /// </summary>
    private async Task OnClickButton(MouseEventArgs obj)
    {
        //log this
        await WebLogger.Click(ButtonText);

        //if custom onclick has been specified than use that
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(obj);
        }
        //else if URL has been specified use that
        else if (IsClickMode)
        {
            //if specified opens link in new tab
            if (OpenNewTab) { _jsRuntime.OpenNewTab(ClickUrl); }
            else { _navigation.NavigateTo(ClickUrl); }
        }

    }

    private async Task OnMouseOver(MouseEventArgs obj)
    {
        //log this
        Console.WriteLine("Mouse Over Button!");

    }


}
