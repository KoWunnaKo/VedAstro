@namespace Website.Pages
@using VedAstro.Library
@using System.Xml.Linq
@using Newtonsoft.Json.Linq
@using System.Text


<div @ref="MainElement" class="vstack gap-1">

    @* BUTTON ROW *@
    <div class="hstack gap-3 mb-2">
        <IconButton SmallSize="true" Outline="true" ButtonText="Show/Hide" IconName="bx:hide">
            <div style="" class="vstack gap-2 w-100">
                <p style="text-align: center;font-size: 18px;white-space: nowrap;margin: 4px; @AppData.DescriptionFont">Coming soon to a browser near you</p>
            </div>
        </IconButton>
        <IconButton SmallSize="true" Outline="true" ButtonText="Life Events" IconName="mdi:calendar-outline">
            <div style="" class="vstack gap-2 w-100">
                <p style="text-align: center;font-size: 18px;white-space: nowrap;margin: 4px; @AppData.DescriptionFont">Coming soon to a browser near you</p>
            </div>
        </IconButton>
        <IconButton SmallSize="true" Outline="true" ButtonText="Save" IconName="ic:outline-save" OnClickCallback="OnClickSaveChartSvg" />
        <IconButton SmallSize="true" Outline="true" ButtonText="Share" IconName="ion:share-outline">
            <div style="" class="hstack gap-2 w-100">
                <IconButton SmallSize="true" ButtonText="Email" OnClickCallback="OnClickShareToEmail" IconName="ion:share-outline" />
                <IconButton SmallSize="true" ButtonText="Facebook" IconName="ion:share-outline" />
            </div>
        </IconButton>
        <IconButton SmallSize="true" Outline="true" ButtonText="Print" IconName="ic:round-print">
            <div style="" class="vstack gap-2 w-100">
                <p style="text-align: center;font-size: 18px;white-space: nowrap;margin: 4px; @AppData.DescriptionFont">Coming soon to a browser near you</p>
            </div>
        </IconButton>
    </div>

    @*
    dark mode is disabled for chart with mix-blend-mode
    note: extra logic to remove filter in normal mode
    *@
    <div @ref="eventsChartSvgHolder" class="container-xxl" id="EventsChartSvgHolder" style="margin-left: -11px; @(AppData.DarkMode?"mix-blend-mode: difference;":"")"></div>

    @*bottom chart options row*@


</div>

@code {


    //█▀▄ ▄▀█ ▀█▀ ▄▀█
    //█▄▀ █▀█ ░█░ █▀█

    /// <summary>
    /// Reference to main holder div
    /// </summary>
    public ElementReference MainElement;
    public ElementReference eventsChartSvgHolder;

    private string PdfFileName = "";

    /// <summary>
    /// Id of chart that is shown
    /// </summary>
    public string CurrentChartId { get; set; }


    public Person SelectedPerson { get; set; }
    public string _timePreset { get; set; }
    public string _eventPreset { get; set; }

    ElementReference _eventsChartSvgHolder;
    public Time StartTime { get; set; }
    public Time EndTime { get; set; }
    public TimeRange TimeRange => new TimeRange(StartTime, EndTime);
    public List<EventTag> InputedEventTags { get; set; }

    private IconButton _showButton;
    private IconButton _hideButton;
    private IconButton _mobileViewButton;

    /// <summary>
    /// Raw SVG string of the latest chart
    /// </summary>
    string _finalSvg;

    bool isDirty = true; //so that it runs on 1st render

    /// <summary>
    /// When true html is rendered
    /// </summary>
    bool _isReady = false;

    public string RawChartSvg { get; set; }

    public TimeRange SelectedTimeRange { get; set; }



    //█▀█ █░█ █▄▄ █░░ █ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▄█ █▄█ █▄▄ █ █▄▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (isDirty)
        {
            isDirty = false;//reset
        }
    }

    /// <summary>
    /// Sets the data that is processed and fill the content
    /// - Parent element calls here to start display chart process
    /// </summary>
    public async Task ShowChart(Person person, TimeRange timeRange, List<EventTag> inputedEventTags)
    {
        //stop if empty person
        if (Person.Empty.Equals(person)) { throw new InvalidOperationException("PERSON CAN'T BE EMPTY!!!"); }

        try
        {
            //close previous if any
            _isReady = false;

            //saved to be accessed later
            SelectedPerson = person;
            InputedEventTags = inputedEventTags;
            SelectedTimeRange = timeRange;

            //get raw SVG chart from API as string
            int maxWidth = 940; //to fit nicely in page
            RawChartSvg = await AppData.API.EventsChart.GetEventsChart(person, timeRange, inputedEventTags, maxWidth);

            //bring chart to live with EventsChart.js
            await _jsRuntime.InvokeVoidAsync(JS.ChartFromSVG, RawChartSvg);

            //get latest dark mode setting
            //so that event chart is not lost in darkness
            await AppData.UpdateDarkMode(_jsRuntime);

            //play sound for better ux
            _jsRuntime.PlayDoneSound();

            //render html
            _isReady = true;

            //needed to make save button appear again
            StateHasChanged();
        }
        catch (Exception e)
        {
            WebLogger.Error(e);
            Console.WriteLine(e.Message);
        }

    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█


    /// <summary>
    /// Generates the needed url and opens new tab with it
    /// </summary>
    /// <returns></returns>
    private async Task OnClickMobileViewButton()
    {
        //generate url
        var personId = SelectedPerson.Id;
        var eventPreset = _eventPreset;
        var timePreset = _timePreset;
        var url = $"{AppData.URL.ApiUrl}/chart/{personId}/{eventPreset}/{timePreset}";

        _jsRuntime.OpenNewTab(url);
    }

    private async Task OnClickCopyChartLink()
    {
        //generate the url
        var url = AppData.URL.ApiUrl + $"/savedchart/{CurrentChartId}";

        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync(JS.CopyToClipboard, url);

        //let user know link coppied
        await _jsRuntime.ShowAlert("success", $"Chart Link Copied!", false, 2600);
    }

    //todo use for lite viewer
    private async Task OnClickSaveChartLocal()
    {
        await _jsRuntime.ShowLoading();

        //check if number of charts exceed 3 (real 4), as that seems to be chrome limit
        var savedChartCount = (await WebsiteTools.GetSavedChartNameList()).Count;
        if (savedChartCount > 3)
        {
            await _jsRuntime.ShowAlert("success", $"Saved charts is full!", false, 2600);
        }

        //a name to uniquely identify this chart
        var chartName = $"{SelectedPerson.Id}|{StartTime.GetStdYear()}-{EndTime.GetStdYear()}|Chart|{SelectedPerson.Name}"; //"Chart" important used later to find
        await _jsRuntime.SetProperty(chartName, _finalSvg);

        _jsRuntime.HideLoading();

        //show message to user
        await _jsRuntime.ShowAlert("success", $"Chart saved successfully!", false, 2600);

    }


    private async Task OnClickShareToEmail()
    {

        try
        {
            //poll till get
            int maxWidth = 940;
            string chartSvg = await AppData.API.EventsChart.GetEventsChart(SelectedPerson, SelectedTimeRange, InputedEventTags, maxWidth);

            //control reaches here than already complete
            await _jsRuntime.InvokeVoidAsync(JS.ChartFromSVG, chartSvg);

            //get latest dark mode setting
            //so that event chart is not lost in darkness
            await AppData.UpdateDarkMode(_jsRuntime);

            //play sound for better ux
            _jsRuntime.PlayDoneSound();

            //render html
            _isReady = true;

            //needed to make save button appear again
            StateHasChanged();
        }
        catch (Exception e)
        {
            WebLogger.Error(e);
            Console.WriteLine(e.Message);
        }
    }

    /// <summary>
    /// Takes the chart as an SVG string and saves it to Downloads as SVG file
    /// </summary>
    /// <returns></returns>
    private async Task OnClickSaveChartSvg()
    {

        var bytes = Encoding.UTF8.GetBytes(RawChartSvg);
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:text/plain;base64,{base64}";
        var filename = $"LifePredictor-{SelectedPerson.NameWithNoSpace}-{SelectedPerson.BirthYear}.svg";
        //await JSRuntime.InvokeVoidAsync("saveAsFile", filename, url);
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, url);
    }

}

@*
    @if (_isReady)
{
    <div class="hstack gap-3 mt-2">
        <IconButton SmallSize="true" Outline="true" ButtonText="Save" IconName="mdi:content-save-cog">
            <DropDownList>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="OnClickSaveAsImage">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="uil:image-download" />
                        <span>Download</span>
                    </a>
                </li>
            </DropDownList>
        </IconButton>
        <IconButton SmallSize="true" Outline="true" ButtonText="Share" IconName="ic:sharp-ios-share">
            <DropDownList>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(()=>WebsiteTools.OnClickSendToEmail(PdfFileName, eventsChartSvgHolder))">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="ic:outline-attach-email" />
                        <span>Email</span>
                    </a>
                </li>
                <li>
                    <a class="dropdown-item hstack gap-1" @onclick="@(() => WebsiteTools.ShareCurrentPageOnFacebook())">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="uil:facebook" />
                        <span>Facebook</span>
                    </a>
                </li>
            </DropDownList>
        </IconButton>
        <IconButton SmallSize="true" Outline="true" ButtonText="Planets" IconName="ic:sharp-ios-share">
            <DropDownList>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Sun" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Sun @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Sun, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Moon" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Moon @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Moon, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Mars" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Mars @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Mars, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Mercury" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Mercury @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Mercury, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Venus" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Venus @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Venus, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Jupiter" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Jupiter @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Jupiter, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Saturn" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Saturn @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Saturn, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Rahu" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Rahu @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Rahu, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="Ketu" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Ketu @AstronomicalCalculator.GetPlanetShadbalaPinda(PlanetName.Ketu, SelectedPerson.BirthTime).ToDouble()</label>
                    </div>
                </li>

            </DropDownList>
        </IconButton>

        <style>
            house-info-style {
                font-size: 10px;
                color: grey;
            }
        </style>
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <Icon IconName="ant-design:highlight-twotone" /> Houses
            </button>
            <ul class="dropdown-menu">
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 1" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 1</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)1, SelectedPerson.BirthTime).ToDouble() | personal self, personal behavior</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 2" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 2</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)2, SelectedPerson.BirthTime).ToDouble() | accumulated money/wealth, food, speech</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 3" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 3</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)3, SelectedPerson.BirthTime).ToDouble() | younger siblings, artistic expression, communication, courage</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 4" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 4</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)4, SelectedPerson.BirthTime).ToDouble() | mother, happiness, vehicles, fixed assets/real estate</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 5" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 5</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)5, SelectedPerson.BirthTime).ToDouble() | romance/love from spouse, speculation, meditation techniques, intelligence</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 6" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 6</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)6, SelectedPerson.BirthTime).ToDouble() | acute disease, struggle, war, opposition, service</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 7" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 7</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)7, SelectedPerson.BirthTime).ToDouble() | partnerships</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 8" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 8</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)8, SelectedPerson.BirthTime).ToDouble() | longevity, transcendental knowledge, unearned wealth, secrets, chronic illness</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 9" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 9</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)9, SelectedPerson.BirthTime).ToDouble() | god, philosophy, guru, religion, fortune, relation with father</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 10" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 10</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)10, SelectedPerson.BirthTime).ToDouble() | career, father’s position</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 11" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 11</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)11, SelectedPerson.BirthTime).ToDouble() | cash flow, opportunities, hopes, friends, influential people older sibling</span></label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="House 12" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault"><span>House 12</span><span class="house-info-style">@AstronomicalCalculator.GetBhavaBala((HouseName)12, SelectedPerson.BirthTime).ToDouble() | enlightenment, expenditures/losses, pleasures from spouse, confinement</span></label>
                    </div>
                </li>
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <Icon IconName="zondicons:view-show" /> Show/Hide
            </button>
            <ul class="dropdown-menu">
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="LifeEvents" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Life Events</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="ColorSummary" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Color Summary</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="SmartSummary" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Smart Summary</label>
                    </div>
                </li>
                <li class="dropdown-item">
                    <div class="form-check">
                        <input class="form-check-input CheckBox" id="BarSummary" type="checkbox" value="">
                        <label class="form-check-label" for="flexCheckDefault">Bar Summary</label>
                    </div>
                </li>
            </ul>
        </div>
        <IconButton ButtonText="Copy Link" IconName="carbon:link" OnClickCallback="OnClickCopyChartLink" SmallSize="true" />

        <IconButton SmallSize="true" @ref="_mobileViewButton" ButtonText="Mobile View" IconName="icomoon-free:mobile" OnClickCallback="OnClickMobileViewButton" />

    </div>
}
 *@
