@namespace Website.Pages
@using VedAstro.Library
@using System.Text.Json.Nodes
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization
@using System.Text.Json
@using JsonSerializer = Newtonsoft.Json.JsonSerializer
@using VedAstro.Library;
@using System.Xml.Linq


<div class="vstack gap-3">
    <div class="hstack gap-3 mt-3">
        <label>Life Events</label>
        <IconButton ButtonText="Add" IconName="fluent:add-square-24-filled" OnClickCallback="OnClickAddLifeEvent" />
        <IconButton Color="success" ButtonText="Save" IconName="bx:save" OnClickCallback="OnClickSaveButton" />
    </div>
    <div style="min-height: 150px;" id="@TableId"></div>
</div>




@code {



    //FIELDS
    const string TableId = "LifeEventsListTable"; //change only needed here



    //PROPERTIES
    private Person InputedPerson { get; set; }



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    private async Task OnClickAddLifeEvent() => await InvokeAsync(async () => await _OnClickAddLifeEvent()).Try(_jsRuntime);
    private async Task OnClickSaveButton() => await InvokeAsync(async () => await _OnClickSaveButton()).Try(_jsRuntime);



    //-------------------EVENT HANDLERS


    public async Task SetData(Person inputedPerson)
    {
        //save inputed person for later use
        InputedPerson = inputedPerson;

        var lifeEventList = InputedPerson.LifeEventList;

        //convert objects to json (for js generator library)
        //and calls js code change table directly
        await _jsRuntime.InvokeVoidAsync(JS.generateLifeEventListTable, TableId, lifeEventList.ToArray());
    }


    /// <summary>
    /// gets the life events entered into Tabulator js table
    /// converts it into life event instances
    /// </summary>
    public async Task<List<LifeEvent>> GetData()
    {
        //get life events from the JS generated table
        var lifeEventListXml = await _jsRuntime.InvokeAsyncJson(JS.getLifeEventsListTableData, "LifeEventList");

        var returnList = new List<LifeEvent>();

        //convert xml to instance (parse it baby)
        //1 day to make this work, no joke looks simple...
        foreach (var lifeEventXml in lifeEventListXml.Elements())
        {
            returnList.Add(LifeEvent.FromXml(lifeEventXml));
        }

        return returnList;

    }

    private async Task _OnClickAddLifeEvent()
    {
        //get person birth location name
        var defaultLocation = InputedPerson.GetBirthLocation().GetName();

        //default time is now at birth location
        var defaultTime = InputedPerson.BirthTime.StdTimeNowAtOffset.ToString(Time.DateTimeFormatNoTimezone);

        var defaultLifeEvent = new
        {
            Name = "New Life Event",
            StartTime = defaultTime,
            Location = defaultLocation,
            Timezone = await Tools.GetTimezoneOffsetString(defaultLocation, defaultTime),
            Description = "Description",
            Nature = "Good"
        };

        //transform it to Json object
        string jsonData = JsonConvert.SerializeObject(defaultLifeEvent);

        //call js to add data
        await _jsRuntime.InvokeAsync<JsonObject>(JS.addNewLifeEventToTable, jsonData);

    }

    private async Task _OnClickSaveButton()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        //todo validation
        //if (!(await IsValidationPassed())) { return; }

        //get latest life events from table
        var lifeEventList = await this.GetData();

        //inject updated life events into person instance to be
        //sent to API for updating main list
        InputedPerson = InputedPerson.SetNewLifeEvents(lifeEventList);

        //send updated person to API
        //todo check for accidental multi tab scenario overwrite
        await AppData.API.UpdatePerson(InputedPerson);

        _jsRuntime.HideLoading();

        //show message to user
        await _jsRuntime.ShowAlert("success", $"Saved successfully!", false, 2500);

    }

}
