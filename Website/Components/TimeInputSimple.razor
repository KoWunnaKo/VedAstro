@implements IAsyncDisposable
@using VedAstro.Library
@using System.Reflection.Emit
@namespace Website.Pages
@using System.Xml.Linq


@*
    A simplified version of time input for:
     - quick adding person and
     - timezone not auto set here, parent has to do it
*@


<style>
    /*to fix time input style in JS date picker*/
    #CalendarPickerHolder input {
        border: 0;
        background-color: #f7f7f7;
    }

    /*to fix time input style in JS date picker*/
    .vanilla-calendar-time__content button {
        margin-top: -2px;
        font-size: 19px;
        border: 0;
        color: black;
    }

    #TimeInputHolder {
        text-align-last: center;
        cursor: pointer;
    }
</style>

<div class="hstack gap-2">
    <div style="width: fit-content;">
        <label class="form-label">@LabelText</label>

        <div id="TimeInputHolder" class="form-control hstack" @onclick="OnClickDateTimeInput">
            <input class="border-0 " id="HourInput" style="width: 33px; cursor: pointer;" @bind="Hour" disabled />:
            <input class="border-0 " id="MinuteInput" style="width: 33px; cursor: pointer;" @bind="Minute" disabled />
            <input class="border-0 " id="MeridianInput" style="width: 37px; cursor: pointer;" @bind="Meridian" disabled />
            <input class="border-0 " id="DateInput" style="width: 33px; cursor: pointer;; margin-left: 18px;" @bind="_date" disabled />/
            <input class="border-0 " id="MonthInput" style="width: 33px; cursor: pointer;" @bind="Month" disabled />/
            <input class="border-0 " id="YearInput" style="width: 56px; cursor: pointer;" @bind="Year" disabled />
        </div>
        @*this is where js date picker will be created*@
        <div @ref="CalendarPickerHolder"
             class="vanilla-calendar visually-hidden border border-primary"
             style="position: absolute;z-index: 999;background: #f7f7f7;"
             id="CalendarPickerHolder"></div>
    </div>
</div>


@code {

    [Parameter]
    public string? LabelText { get; set; } = "Time";

    public string? Hour
    {
        get => _hour;
        set
        {
            _hour = value;
            StateHasChanged();
        }
    }

    public string? Minute
    {
        get => _minute;
        set
        {
            _minute = value;
            StateHasChanged();
        }
    }

    public string? Meridian
    {
        get => _meridian;
        set
        {
            _meridian = value;
            StateHasChanged();
        }
    }

    public string? Date
    {
        get => _date;
        set
        {
            _date = value;
            StateHasChanged();
        }
    }
    public string? Month
    {
        get => _month;
        set
        {
            _month = value;
            StateHasChanged();
        }
    }

    public string? Year
    {
        get => _year;
        set
        {
            _year = value;
            StateHasChanged();
        }
    }

    public string? TimeZone
    {
        get => _timeZone;
        set
        {
            _timeZone = value;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets parseable time string from JS calendar plugin
    /// </summary>
    public async Task<string> GetFullTimeString()
    {
        //get latest values using JS
        var hour = await _jsRuntime.GetValue("#HourInput");
        var minute = await _jsRuntime.GetValue("#MinuteInput");
        var meridian = await _jsRuntime.GetValue("#MeridianInput");
        var date = await _jsRuntime.GetValue("#DateInput");
        var month = await _jsRuntime.GetValue("#MonthInput");
        var year = await _jsRuntime.GetValue("#YearInput");


        //convert 12H time from input to 24H
        DateTime dt = DateTime.Parse($"{hour}:{minute} {meridian}");
        var hour24 = dt.ToString("HH:mm");

        //create 24H standard time format used
        //note: time zone is set by parent
        return $"{hour24} {date}/{month}/{year} {TimeZone}";
    }


    private string? _hour = DateTime.Today.ToString("HH");
    private string? _minute = DateTime.Today.ToString("mm");
    private string? _meridian = DateTime.Today.ToString("tt");
    private string? _date = DateTime.Today.ToString("dd");
    private string? _month = DateTime.Today.ToString("MM");
    private string? _year = DateTime.Today.ToString("yyyy");
    private string? _timeZone = DateTimeOffset.Now.ToString("zzz");

    IJSObjectReference module;
    private ElementReference CalendarPickerHolder;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //load js script for date time picker
            module = await _jsRuntime.InvokeAsync<IJSObjectReference>(JS.import, "./js/TimeInput.js");
        }
    }

    /// <summary>
    /// Creates a new Time instance with inputed time data
    /// </summary>
    public async Task<Time> GetTime(GeoLocation geoLocation) => new Time(await this.GetFullTimeString(), geoLocation);

    /// <summary>
    /// Creates a new DateTimeOffset instance with inputed time data
    /// </summary>
    public async Task<DateTimeOffset> GetDateTimeOffset()
    {
        var fullTimeString = await GetFullTimeString();
        return DateTimeOffset.ParseExact(fullTimeString, Time.DateTimeFormat, null);
    }


    private async Task OnClickDateTimeInput()
    {
        StateHasChanged();

        //get latest values using JS
        var hour = await _jsRuntime.GetValue("#HourInput");
        var minute = await _jsRuntime.GetValue("#MinuteInput");
        var meridian = await _jsRuntime.GetValue("#MeridianInput");
        var date = await _jsRuntime.GetValue("#DateInput");
        var month = await _jsRuntime.GetValue("#MonthInput");
        var year = await _jsRuntime.GetValue("#YearInput");


        //initialize picker with needed values
        //note: we get values using JS, because set via JS and Blazor Bind doesn't get it
        await module.InvokeVoidAsync(JS.LoadCalendar, hour, minute, meridian, date, month, year);

        //toggle picker
        await _jsRuntime.ToggleClass(CalendarPickerHolder, "visually-hidden");
    }

    /// <summary>
    /// using a module, we need to make sure we explicitly dispose of it for garbage collection.
    /// If we don't, the JSRuntime will continue holding a reference to our module for the lifetime of the application.
    /// To do this, our component must implement IAsyncDisposable, then we can dispose of our module in the DisposeAsync method.
    /// TODO CHECK RELEVANCE
    /// </summary>
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    /// <summary>
    /// time converted to the format used in OPEN API url
    /// Time/ + 00:00/22/05/2023/+00:00
    /// </summary>
    /// <returns></returns>
    public string GetUrlString()
    {
        //reconstruct into URL pattern
        //00:00/22/05/2023/+00:00
        var returnVal = $"{this.Hour}:{this.Minute}/{this.Date}/{this.Month}/{this.Year}/{this.TimeZone}";
        return returnVal;
    }

}
