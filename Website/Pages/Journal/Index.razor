@attribute [Route(PageRoute.Journal)]
@attribute [Route(PageRoute.JournalParam)]
@using VedAstro.Library


<PageTitle>@_pageTitle</PageTitle>

<PageTop ImageName="journal-banner.png"
         Title="Astro Journal"
         DescriptionText="Record your life events to understand the astrological reason behind them.">
</PageTop>



<div>
    <div class="d-flex flex-wrap">
        <div class="vstack gap-3">
            <PersonSelectorBox @ref="_peopleSelectorBox" />
            <IconButton SmallSize="true" IconName="uim:process" ButtonText="Show journal" OnClickCallback="ShowButtonClicked"></IconButton>
        </div>

        <InfoBox Title="Quick Tip" IconName="flat-color-icons:idea">
            <DescriptionHTML>
                After updating your journal, go to <BoldLink URL="@PageRoute.LifePredictor">Life Predictor</BoldLink>,
                to view them against astrological influence.
            </DescriptionHTML>
            <ImageHTML>
                <img class="img-thumbnail" width="@GR.W412px" src="images/journal-example-life-hitler.png" />
            </ImageHTML>
        </InfoBox>

    </div>

</div>

@*divider*@
<hr />

@*list that will be shown after calculate*@
<div class="vstack gap-2 p-2" style="@(_isReady?"":"display:none;")">

    @*SEARCH*@
    @*<div class="hstack gap-3">
    <input @bind="_searchInput" type="text" class="form-control" placeholder="Search">
    <IconButton SmallSize="true" ButtonText="Search" IconName="bx:search-alt" OnClickCallback="SearchButtonClicked"></IconButton>
    </div>*@

    @*LIST OF PREDICTIONS*@
    <LifeEventEditor @ref="_lifeEventEditor" />

</div>




@code {

    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    private string _pageTitle = "Journal"; //default
    private LifeEventEditor _lifeEventEditor;

    private string _searchInput = "";
    private Person _selectedPerson;
    private List<LifeEvent>? _filteredLifeEvents;
    private PersonSelectorBox? _peopleSelectorBox;

    private bool _isReady = false;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRenderAsync(bool firstRender)
    {
        //if parameter has been set then auto load person data as
        //though person was selected and calculate was clicked
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _peopleSelectorBox.SetPerson(PersonIdUrl);

            //start the same process as show button click
            await ShowButtonClicked();

    //needed to see updates because any changes in OnAfterRender
    //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();

            //little delay for renderer to complete
            //await Task.Delay(200);

            //HACK: done because StateHasChanged will clear the one by SetPerson above
            //await _jsRuntime.SetValue(".PersonSelector", PersonIdUrl);
        }
    }

    private async Task ShowButtonClicked()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        //if (!await ValidationPassed()) { return; }

        //hide data while loading, only after validation
        _isReady = false;

        //get person from person dropdown
        _selectedPerson = await _peopleSelectorBox.GetSelectedPerson();

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = _selectedPerson.Id; //save local copy
        var urlWithId = Path.Combine(PageRoute.Journal, PersonIdUrl);
        _navigation.NavigateTo(urlWithId); //does not reload page since same URL

        //life events
        await _lifeEventEditor.SetData(_selectedPerson);

        //make a copy for search
        _filteredLifeEvents = _selectedPerson.LifeEventList.ToList();

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Journal | {_selectedPerson.Name}";

        _isReady = true;

        //close loading box
        _jsRuntime.HideAlert();

    }

    private void SearchButtonClicked()
    {
        Console.WriteLine("TODO");
    }


}
