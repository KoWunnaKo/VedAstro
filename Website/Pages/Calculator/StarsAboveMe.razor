@using VedAstro.Library
@attribute [Route(PageRoute.StarsAboveMe)]

<PageTitle>Stars Above Me</PageTitle>

<PageTop ImageName="stars-above-me-banner.png"
         Title="Stars Above Me"
         DescriptionText="Info of stars and planets above you now. View pure astronomical and inteprated Vedic data for past and future anywhere in the world.">
</PageTop>


<div class="hstack gap-3 mt-4 mb-5">
    <TimeInputSimple @ref="_timeInput" LabelText="Time" /> @*todo default to now*@
    <GeoLocationInput @ref="_geoLocationInput" LabelText="Location" HideLongLat="@true" />
    <IconButton ButtonText="Refresh" Color="success" ExtraClass="align-self-end" IconName="uim:process" OnClickCallback="RefreshData" />
</div>


@if (isReady)
{
    <IconButton/>
    <img src="@GetUrl("SkyChart")" class="my-2">

    <hr />
    <img src="@GetUrl("SkyChartGIF")" class="my-2">


    <IconTitle Title="Vedic" IconName="ph:star-of-david-duotone" />
    <table class="table-striped table-hover table-bordered mb-5">
        <thead>
            <tr>
                <th scope="col" class="p-1">Data</th>
                <th scope="col" class="p-1">Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var calcResult in astrologyCalcs)
            {
                <tr>
                    <th scope="row" class="p-1">@Format.FormatName(calcResult.Name)</th>
                    <td class="p-1">@calcResult.ToString()</td>
                </tr>
            }
        </tbody>
    </table>


    <IconTitle Title="Astronomy" IconName="streamline:ecology-science-planet-solar-system-ring-planet-saturn-space-astronomy" />
    <table class="table-striped table-hover table-bordered">
        <thead>
            <tr>
                <th scope="col">Data</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var calcResult in astronomyCalcs)
            {
                <tr>
                    <th scope="row">@calcResult.Name</th>
                    <td>@calcResult.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    @AppData.LoadingImage
}

<hr />

<div>
    <figure style="cursor: pointer;" class="text-center mt-5" @onclick="() => _jsRuntime.OpenNewTab(URL.CarlSaganWiki)">
        <blockquote class="blockquote">
            <p>We're made of star stuff</p>
        </blockquote>
        <figcaption class="blockquote-footer">
            Carl Sagan
        </figcaption>
    </figure>
</div>


@code {

    private bool isReady = false;

    private List<APIFunctionResult> astrologyCalcs;
    private List<APIFunctionResult> astronomyCalcs;

    private Time finalTime = Time.Empty;
    private GeoLocation finalGeoLocation = GeoLocation.Empty;
    private TimeInputSimple _timeInput;
    private GeoLocationInput _geoLocationInput;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //page should auto show data for user at current location
        //we wait after render to get ready time and location
        if (firstRender) { await RefreshData(); }

    }


    private async Task RefreshData()
    {
        //trigger loading icon
        isReady = false;

        //get data from input fields,
        //on page load, will get today and user's location from IP address
        finalGeoLocation = _geoLocationInput.GetGeoLocation();
        finalTime = await _timeInput.GetTime(finalGeoLocation);

        //get all methods that have only time as input
        astronomyCalcs = AutoCalculator.ExecuteFunctions(Category.Astronomical, finalTime);
        astrologyCalcs = AutoCalculator.ExecuteFunctions(Category.StarsAboveMe, finalTime);


        isReady = true;

        StateHasChanged();

    }

    private string GetUrl(string ending)
    {
        var locationName = Tools.RemoveWhiteSpace(_geoLocationInput.GetGeoLocation().GetName());
        var url = $"https://beta.api.vedastro.org/Location/{locationName}/Time/{_timeInput.GetUrlString()}/{ending}";


        return url;
    }

}
