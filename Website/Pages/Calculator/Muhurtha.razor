@attribute [Route(PageRoute.Muhurtha)]
@using VedAstro.Library

<PageTitle>@_pageTitle</PageTitle>

<PageTop Title="Muhurtha" IconName="ic:twotone-event">
    <Description>
        Muhurtha is sanskrit for "Good Time" or "Electional Astrology".
        Find out the right time for wedding, job interview, buying house and etc.
    </Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.AddPerson"></IconButton>
        <IconButton IconName="bx:book-reader" ButtonText="Help" OnClickCallback="@_helpSection.Show"></IconButton>
    </ButtonsRow>
</PageTop>

<UnderConstructionHeader PageName="Muhurtha" />

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="easy-tab" data-bs-toggle="tab" data-bs-target="#easy" type="button" role="tab" aria-controls="easy" aria-selected="true">Easy</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="advanced-tab" data-bs-toggle="tab" data-bs-target="#advanced" type="button" role="tab" aria-controls="advanced" aria-selected="false">Advanced</button>
    </li>
</ul>
<div class="tab-content border" id="myTabContent">
    @*EASY TAB*@
    <div class="tab-pane fade show active" id="easy" role="tabpanel" aria-labelledby="easy-tab">
        <div class="vstack gap-3 p-1">
            <PersonSelectorBox @ref="_easyPersonSelectorBox" />
            <div>
                <label class="form-label">Event Type</label>
                <select @bind="_selectedEventType" class="form-control" style="width: fit-content; min-width: 273px;">
                    <option value="General">General</option>
                    <option value="Agriculture">Agriculture</option>
                    <option value="Marriage">Marriage</option>
                    <option value="Medical">Medical</option>
                    <option value="Travel">Travel</option>
                    <option value="BuyingSelling">Buying &amp; Selling</option>
                    <option value="Building">House Building</option>
                    <option value="Gochara">Gochara</option>
                    <option value="HairNailCutting">Cut Hair &amp; Nails</option>
                </select>
            </div>
            <div>
                <label class="form-label">Time Range</label>
                <select @bind="_selectedTimeRange" class="form-control" style="width: fit-content; min-width: 273px;">
                    <option value="Day">Day</option>
                    <option value="Week">Week</option>
                    <option value="Month">Month</option>
                    <option value="Year">Year</option>
                </select>
            </div>

            <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculateEasy" ShowDelayWarning="true"></IconButton>

        </div>

    </div>

    @*ADVANCED TAB*@
    <div class="tab-pane fade" id="advanced" role="tabpanel" aria-labelledby="advanced-tab">
        <div class="vstack gap-3" style="max-width: @GR.W412px">
            <PersonSelectorBox @ref="_peopleSelectorBox" />

            <TimeInput @ref="_startTimeInput" />
            <TimeInput @ref="_endTimeInput" />


            <h6 class="mt-2 mb-0">Select Type</h6>
            <div class="border border-1">
                <div class="d-flex flex-wrap">
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_dasaCheckBox" type="checkbox">
                            <label class="form-check-label">Dasa <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_bhuktiCheckBox" type="checkbox">
                            <label class="form-check-label">Bhukti <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_antaramCheckBox" type="checkbox">
                            <label class="form-check-label">Antaram <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_gocharaCheckBox" type="checkbox">
                            <label class="form-check-label">Gochara <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_personalCheckBox" type="checkbox">
                            <label class="form-check-label">Personal <HelpIconTooltip HelpText="Tarabala..." SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_generalCheckBox" type="checkbox">
                            <label class="form-check-label">General <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_agricultureCheckBox" type="checkbox">
                            <label class="form-check-label">Agriculture <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2 bd-highlight">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_astronomicalCheckBox" type="checkbox">
                            <label class="form-check-label">Astronomical <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2 bd-highlight">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_rulingConstellationCheckBox" type="checkbox">
                            <label class="form-check-label">Ruling Constellation <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_hairNailCuttingCheckBox" type="checkbox">
                            <label class="form-check-label">Cutting Hair/Nails <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_buildingCheckBox" type="checkbox">
                            <label class="form-check-label">House Building <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                    <div class="p-2">
                        <div class="form-check">
                            <input class="form-check-input" @bind="_travelCheckBox" type="checkbox">
                            <label class="form-check-label">Travel <HelpIconTooltip HelpText="All dasa events are included" SmallIcon="true"/></label>
                        </div>
                    </div>
                </div>
            </div>


            <IconButton IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculate" ShowDelayWarning="true"></IconButton>

        </div>
    </div>
</div>


@*hide until ready but initialized as well*@
<div style="@(_isResultReady?"":"display:none;")">
    <hr>
    @*DASA VIEW BOX*@
    <div style="margin-bottom: 50px">
        <EventsChartViewer @ref="_eventReportViewer"></EventsChartViewer>
    </div>
    @if (_isResultReady)
    {
        <hr>
        <StrengthChart Time="@_selectedPerson.BirthTime" />
    }

</div>


@*HELP SECTION*@
<PageHelpSection @ref="_helpSection">
    <Content>
        <h4 class="fw-bold">Muhurtha vs. Horoscope</h4>
        <p class="text-justify">
            What is meant by Muhurtha? How far is it superior to horoscopy? These
            are important questions which we shall try to answer here.
            Horoscopy reads what is indicated by the planetary positions at the time
            of birth being the resultant of one's previous karma. In other words, it
            has to do only with what one has brought with him the sum-total of one's
            inheritance - physical, mental and material. Here we do nothing more
            than read simply a technical letter as if it were written in planetary and
            other symbols.
        </p>
        <p class="text-justify">
            Muhurtha, on the other hand, is much more important. It
            gives valuable directions by following which the person will be enabled
            to remove, neutralize, counteract or overcome the evils indicated by the
            horoscopic chart. Horoscopy is diagnostic. It merely points out the ills
            but prescribes no remedies. Muhurtha is prescriptive as well as
            preventive. It tells how by undertaking ventures at auspicious times one
            can ward off the evils and ensure success.
        </p>
        <p class="text-justify">
            Suppose break in education
            is indicated by the position of evil planets in the fourth house from the
            Ascendant and by the affliction of Jupiter, lord of education and
            Mercury, lord of intelligence. These planetary conjunctions indicate want
            of education in a man as a result of his karma in previous states of
            existence. Muhurtha says that the obstructions to educational progress
            by the planetary conjunctions indicated at the time of birth can be
            minimized by fixing an auspicious time* for commencing the education.
            Suppose evil planets in the fifth house indicate loss of children. Then
            Muhurtha comes to his help first by asking him to marry at a certain
            auspicious time when ethereal currents released from the planets will be
            so powerful as to minimize or modify the afflictions to the extent that the
            birth and survival of at least some children may be ensured.
        </p>
        <p class="text-justify">
            Thus Muhurtha helps one to minimize or modify the evils of our past Karma to
            a considerable extent. I must warn my readers not to imagine that
            Muhurtha is the masterkey to all wealth and happiness. Muhurtha tells
            us when to do a certain thing if failure is to be avoided.
        </p>

        @AppData.MuhurthaCredit

    </Content>
</PageHelpSection>


@code {
    private string _pageTitle = "Muhurtha";

    private Person _selectedPerson;

    private bool _isResultReady = false; //marks if the page ready to loaded

    private PageHelpSection _helpSection;

    private bool _dasaCheckBox, _bhuktiCheckBox, _antaramCheckBox, _gocharaCheckBox, _personalCheckBox, _travelCheckBox;
    private bool _generalCheckBox, _buildingCheckBox, _agricultureCheckBox, _astronomicalCheckBox, _rulingConstellationCheckBox;
    private bool _hairNailCuttingCheckBox;

    private string _selectedEventType = "General";
    private string _selectedTimeRange = "Day";

    private TimeInput _startTimeInput;
    private TimeInput _endTimeInput;

    private PersonSelectorBox? _peopleSelectorBox;
    private PersonSelectorBox? _easyPersonSelectorBox;

    private EventsChartViewer? _eventReportViewer;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    private async Task OnClickCalculate() => await InvokeAsync(async () => await _OnClickCalculate()).Try(_jsRuntime);
    private async Task OnClickCalculateEasy() => await InvokeAsync(async () => await _OnClickCalculateEasy()).Try(_jsRuntime);




    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {   //default set time to end of day
            _endTimeInput.HourMin = "23:59";
        }
    }

    private async Task _OnClickCalculate()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!ValidationPassed()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get needed input data
        //get data from inputs and save it for use by other components
        _selectedPerson = await _peopleSelectorBox.GetSelectedPerson();
        var startTime = new Time($"{_startTimeInput.HourMin} {_startTimeInput.DateMonthYear} {Tools.GetSystemTimezoneStr()}", _selectedPerson.GetBirthLocation());
        var endTime = new Time($"{_endTimeInput.HourMin} {_endTimeInput.DateMonthYear} {Tools.GetSystemTimezoneStr()}", _selectedPerson.GetBirthLocation());
        var getSelectedEventTypes = GetSelectedEventTypes();

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Muhurtha | {_selectedPerson.Name}";

        //inputedEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Gochara, EventTag.Personal, EventTag.General };
        await _eventReportViewer?.ShowChart(_selectedPerson, new TimeRange(startTime, endTime), getSelectedEventTypes);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();
    }

    private async Task _OnClickCalculateEasy()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!ValidationPassedEasy()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get needed input data
        _selectedPerson = await _easyPersonSelectorBox.GetSelectedPerson();
        var timeRange = AutoCalculateTimeRange(_selectedTimeRange, _selectedPerson.GetBirthLocation(), Tools.GetSystemTimezone());
        var getSelectedEventTypes = GetSelectedEventTypesEasy();

        //put person name into tab title for easy multi-tabbing
        //await _jsRuntime.SetTitle($"Muhurtha | {_selectedPerson.Name}");
        _pageTitle = $"Muhurtha | {_selectedPerson.Name}";

        //hack to make work direct link button
        _eventReportViewer._timePreset = _selectedTimeRange;
        _eventReportViewer._eventPreset = _selectedEventType;

        await _eventReportViewer.ShowChart(_selectedPerson, timeRange, getSelectedEventTypes);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();


        //LOCAL FUNCTIONS

        TimeRange AutoCalculateTimeRange(string timePreset, GeoLocation birthLocation, TimeSpan timezone)
        {

            Time start, end;
            //use the inputed user's timezone
            DateTimeOffset now = DateTimeOffset.Now.ToOffset(timezone);
            var today = now.ToString("dd/MM/yyyy zzz");

            var yesterday = now.AddDays(-1).ToString("dd/MM/yyyy zzz");
            switch (timePreset)
            {

                case "Hour":
                    var startHour = now.AddHours(-1);//back 1 hour
                    var endHour = now.AddHours(1);//front 1 hour
                    start = new Time(startHour, birthLocation);
                    end = new Time(endHour, birthLocation);
                    return new TimeRange(start, end);
                case "Today":
                case "Day":
                    start = new Time($"00:00 {today}", birthLocation);
                    end = new Time($"23:59 {today}", birthLocation);
                    return new TimeRange(start, end);
                case "Week":
                    start = new Time($"00:00 {yesterday}", birthLocation);
                    var weekEnd = now.AddDays(7).ToString("dd/MM/yyyy zzz");
                    end = new Time($"23:59 {weekEnd}", birthLocation);
                    return new TimeRange(start, end);
                case "Month":
                    start = new Time($"00:00 {yesterday}", birthLocation);
                    var monthEnd = now.AddDays(30).ToString("dd/MM/yyyy zzz");
                    end = new Time($"23:59 {monthEnd}", birthLocation);
                    return new TimeRange(start, end);
                case "Year":
                    start = new Time($"00:00 {yesterday}", birthLocation);
                    var yearEnd = now.AddDays(365).ToString("dd/MM/yyyy zzz");
                    end = new Time($"23:59 {yearEnd}", birthLocation);
                    return new TimeRange(start, end);
                default:
                    return new TimeRange(Time.Empty, Time.Empty);
            }
        }
    }


    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassed()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        //TEST 2
        //check if at-least 1 event is selected
        if (!GetSelectedEventTypes().Any())
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectEventType, true);
            return false;
        }

        //if control reaches here than validation passed
        return true;
    }
    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassedEasy()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_easyPersonSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        //TEST 2
        //check if at-least 1 event is selected

        //if control reaches here than validation passed
        return true;
    }


    private List<EventTag> GetSelectedEventTypes()
    {
        var returnList = new List<EventTag>();


        if (_dasaCheckBox) { returnList.Add(EventTag.PD1); }
        if (_bhuktiCheckBox) { returnList.Add(EventTag.PD2); }
        if (_antaramCheckBox) { returnList.Add(EventTag.PD3); }
        if (_gocharaCheckBox) { returnList.Add(EventTag.Gochara); }
        if (_rulingConstellationCheckBox) { returnList.Add(EventTag.RulingConstellation); }
        if (_personalCheckBox) { returnList.Add(EventTag.Personal); }
        if (_generalCheckBox) { returnList.Add(EventTag.General); }
        if (_agricultureCheckBox) { returnList.Add(EventTag.Agriculture); }
        if (_astronomicalCheckBox) { returnList.Add(EventTag.Astronomical); }
        if (_buildingCheckBox) { returnList.Add(EventTag.Building); }
        if (_hairNailCuttingCheckBox) { returnList.Add(EventTag.HairNailCutting); }
        if (_travelCheckBox) { returnList.Add(EventTag.Travel); }

        return returnList;
    }

    private List<EventTag> GetSelectedEventTypesEasy()
    {
        var returnList = new List<EventTag>();

        switch (_selectedEventType)
        {
            //only general is customized
            case "General":
                returnList.Add(EventTag.General);
                returnList.Add(EventTag.RulingConstellation);
                break;

            //others are converted as is
            default:
                returnList.Add(Enum.Parse<EventTag>(_selectedEventType));
                break;

        }

        //add personal to all selections
        returnList.Add(EventTag.Personal);

        return returnList;
    }
}
