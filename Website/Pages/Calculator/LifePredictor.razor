@attribute [Route(PageRoute.LifePredictor)]
@attribute [Route(PageRoute.LifePredictorParam)]
@using VedAstro.Library

<PageTitle>@_pageTitle</PageTitle>

<PageTop ImageName="life-predictor-banner.png"
         Title="Life Predictor"
         DescriptionText="Each life is a story. Advanced computation algorithms fused with ancient astrology makes this chart possible.
        Its a digital snapshot of a human's life on earth.">
</PageTop>


@*Dasas are major periods in which the indications of the planets are realised.
Know good and bad periods of your life years ahead.*@


<div>
    <div class="d-flex justify-content-between">
        <div class="me-md-5" style="width: @GR.W412px;">
            @*TAB BUTTONS*@
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="easy-tab" data-bs-toggle="tab" data-bs-target="#easy" type="button" role="tab" aria-controls="easy" aria-selected="true">
                        <Icon IconName="maki:school" />
                        Easy
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="advanced-tab" data-bs-toggle="tab" data-bs-target="#advanced" type="button" role="tab" aria-controls="advanced" aria-selected="false">
                        <Icon IconName="tabler:school" />
                        Advanced
                    </button>
                </li>
                @*                <li class="nav-item" role="presentation">
                <button @onclick="OnClickSavedTab" class="nav-link" id="saved-tab" data-bs-toggle="tab" data-bs-target="#saved" type="button" role="tab" aria-controls="saved" aria-selected="false">
                <Icon IconName="prime:save" />
                Saved
                </button>
                </li>
                *@
            </ul>

            @*TAB CONTENT*@
            @*all border except top*@
            <div class="tab-content border" id="myTabContent">

                @*EASY*@
                <div class="tab-pane fade show active" id="easy" role="tabpanel" aria-labelledby="easy-tab">
                    <div class="vstack gap-3 p-3">
                        <PersonSelectorBox @ref="_easyPersonSelectorBox" />

                        <div>
                            <label class="form-label">Time Range<HelpIconTooltip SmallIcon="true" HelpText="@HelpText.DasaTimeRange" /></label>
                            <select @bind="_selectedTimeRange" class="form-control" style="width: fit-content; min-width: 273px;">
                                <option value="FullLife">Full Life</option>
                                <option value="Age1to25">Age 1 to 25</option>
                                <option value="Age10to35">Age 10 to 35</option>
                                <option value="Age25to50">Age 25 to 50</option>
                                <option value="Age35to60">Age 35 to 60</option>
                                <option value="Age50to75">Age 50 to 75</option>
                                <option value="Age60to85">Age 60 to 85</option>
                                <option value="Age75to100">Age 75 to 100</option>
                            </select>
                        </div>

                        <IconButton SmallSize="true" IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculateEasy" ShowDelayWarning="true"></IconButton>

                    </div>
                </div>

                @*ADVANCED*@
                <div class="tab-pane fade" id="advanced" role="tabpanel" aria-labelledby="advanced-tab">
                    <div class="vstack gap-3 p-3">
                        @*PERSON SELECTOR
                        note: selector placed here because multiple components use it
                        *@
                        <PersonSelectorBox @ref="_peopleSelectorBox" />
                        <MonthYearSelectorBox LabelText="Start" @ref="_startTimeSelector" />
                        <MonthYearSelectorBox LabelText="End" @ref="_endTimeSelector" />

                        @*CALCULATE BTN*@
                        <IconButton SmallSize="true" IconName="uim:process" ButtonText="Calculate" OnClickCallback="OnClickCalculate" ShowDelayWarning="true"></IconButton>

                    </div>
                </div>

                @*SAVED*@
                @*                <div class="tab-pane fade" id="saved" role="tabpanel" aria-labelledby="saved-tab">
                <div class="vstack gap-3 p-3">
                <div class="input-group mb-3">
                <label class="input-group-text" for="inputGroupSelect01">Saved Chart</label>
                <select class="form-select" @bind="_selectedChartId" id="inputGroupSelect01">
                <option selected>Choose...</option>
                @foreach (var chart in _allChartList)
                {
                <option value="@(chart.ChartId)">@(chart.Name)</option>
                }
                </select>
                </div>
                <IconButton SmallSize="true" IconName="ant-design:folder-view-outlined" ButtonText="Show" OnClickCallback="OnClickShowSaved"></IconButton>
                </div>
                </div>
                *@
            </div>

        </div>

        <div>
            <InfoBox Title="Accurate" FullWidth="true" MaxWidth="@((int)(GR.W255+GR.W157))" IconName="noto-v1:direct-hit">
                <DescriptionHTML>
                    Predict your life with zero astrological knowledge
                </DescriptionHTML>
                <ImageHTML>
                    <img class="img-thumbnail" src="images/life-predictor-alertbox-examples.jpg" />
                </ImageHTML>
            </InfoBox>
        </div>

    </div>

</div>

<hr>

@*DASA VIEW BOX*@
@*hide until ready but initialized as well*@
<div style="@(_isResultReady?"":"display:none;")">
    <div @ref="_holderDiv">
        <EventsChartViewer @ref="_eventsChartViewer" />
    </div>
</div>

<div class="gap-3 mt-3" style="max-width: @GR.W667px">
    
    <ArticleBlock Title="Colors" IconName="noto-v1:artist-palette">
        <TextHTML>
            <p class="text-justify">
                Our eyes and brain process color much more easily than text. That is why we converted complicated predictions into easy to
                understand colors. <span style="color: red;font-weight: 900;">RED</span> is for bad life events, <span style="color: green;font-weight: 900;">GREEN</span> is
                for good. Quickly read your life chart with <strong>zero</strong> astrological knowledge. No manuals needed.
            </p>
        </TextHTML>
    </ArticleBlock>

</div>


@*<div class="mt-4">
    SHOW RAW HOROSCOPE & PREDICTION DATA VIA TABS
    <HoroscopeInfoView @ref="_horoscopeInfoView" />
</div>
*@

@*HELP SECTION*@
@*<PageHelpSection @ref="_helpSection">
    <Content>

        <h4 class="fw-bold">Purpose?</h4>
        <p class="text-justify mb-4">
            The vexed question of timing events is solved to a great
            extent by the Dasa system. From a scientific point of view,
            we cannot say with any sort of definiteness, upon what basis
            each planet is allotted a certain number of years as its term of Dasa.
            But in actual practice, the Dasa system yields very satisfactory result
        </p>

        <h4 class="fw-bold">What Dasa system do you use?</h4>
        <p class="text-justify mb-4">
            There are any number of Dasas in general use,
            but we propose to deal with Vimshottari. In the
            choice of any particular type of Dasa, the criterion must be
            that of experience and Vimshottari has answered this test.
        </p>

        <h4 class="fw-bold">How to calculate?</h4>
        <p class="text-justify mb-4">
            The position of the Moon at birth is important in the
            calculation of the Dasas. Every constellation covers 13.3Â°
            degrees of the zodiacal space. Each nakshatra has a planet
            assigned as its lord and the Dasa at birth is determined rather
            indicated by the constellation occupied by the Moon at the
            moment of birth.
        </p>


        <ul class="list-group">
            <li class="list-group-item active" aria-current="true">Tips to read dasa</li>
            <li class="list-group-item">
                1. For instance
                political success may be predicted in the Dasa of the Sun, if
                he is in Aries in the 10th house. This political success will be
                at its maximum provided the Sun is not aspected by malefics
                and his position is equally strong in the Navamsa. If he is
                aspected by Saturn who may be in Aquarius, then in spite of
                the Sun being in Aries, complete political success cannot be
                and ought not to be predicted.
            </li>
            <li class="list-group-item">
                2. The Dasa results stand to be modified by the effect of
                Gochara or transiting planets.
            </li>
            <li class="list-group-item">
                3. If the lord is well placed as already explained above,
                be will do good regarding the house or houses with which he
                may have anything to do either by way of ownership or aspect
                or location during his period. while if the lord is weak and ill placed,
                he will inflict misery.
            </li>
            <li class="list-group-item">
                4. The lord of the Dasa has a quality of his own stamped
                upon him. This will again be modified by the nature of the
                house, the nature of the sign, the nature of the aspecting
                bodies, the nature of the lord of the constellation the Dasa
                lord is in, the favourable and unfavourable situation of the
                lord of Dasa in the Navamsa
            </li>
            <li class="list-group-item">
                5. ln the course of a Dasa, a planet produces such results
                as it indicates by virtue of ownership, association, location
                and aspect. For instance, favourable position of the lord of
                the 2nd will give good income and wealth during his Dasa.
            </li>
            <li class="list-group-item">
                6. The general effect of the Dasa (major period) get
                modified by the planet that rules the particular Bhukti (sub-period).
                In such a case, however, the influences of both the
                planets are to be compounded and the relation between them
                taken into account
            </li>
        </ul>
        @AppData.HinduPredictiveAstrologyCredit

    </Content>
</PageHelpSection>
*@

@code {

    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// also set via URL when page is loaded
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    //private HoroscopeInfoView? horoscopeInfoView;

    private ElementReference _holderDiv;

    private string _pageTitle = "Dasa";
    //--------------------FIELDS
    private string _selectedTimeRange = "FullLife"; //1st in list
    private string _selectedChartId = "";

    private PageHelpSection _helpSection;

    private PersonSelectorBox? _peopleSelectorBox;
    private PersonSelectorBox? _easyPersonSelectorBox;

    private EventsChartViewer? _eventsChartViewer;

    public Person SelectedPerson { get; set; }
    public GeoLocation SelectedLocation { get; set; }
    private bool _isResultReady = false; //marks if the page ready to loaded
    private MonthYearSelectorBox _startTimeSelector;
    private MonthYearSelectorBox _endTimeSelector;

    private List<ChartName> _allChartList = new List<ChartName>();


    //ââââââââââââââââââââââââââââââââââ âââââââââââââââââââââââââââââ
    //ââââââââââââââââââââââââââââââââââ âââââââââââââââââââââââââââââ
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER



    private async Task OnClickCalculate() => await InvokeAsync(async () => await _OnClickCalculate()).Try(_jsRuntime);
    private async Task OnClickShowSaved() => await InvokeAsync(async () => await _OnClickShowSaved()).Try(_jsRuntime);
    private async Task OnClickCalculateEasy() => await InvokeAsync(async () => await _OnClickCalculateEasy()).Try(_jsRuntime);
    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);


    //ââââââââââââââââââââââââââ âââââââââââââââââââââââââââââ
    //ââââââââââââââââââââââââââ âââââââââââââââââââââââââââââ

    private async Task _OnAfterRenderAsync(bool firstRender)
    {
        //if parameter has been set then auto load person data as
        //though person was selected and calculate was clicked
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _peopleSelectorBox.SetPerson(PersonIdUrl);

            //start the same process as show button click
            //todo loading box disappears here, needs fix
            await _OnClickCalculate();

            //needed to see updates because any changes in OnAfterRender
            //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();
        }
    }


    /// <summary>
    /// Saves current chart to local storage
    /// </summary>
    /// <returns></returns>
    private async Task _OnClickShowSaved()
    {
        await _jsRuntime.ShowLoading();

        //todo make sure a chart is selected
        //if (!ValidationPassed()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //show saved chart
        await _eventsChartViewer?.ShowSavedChart(_selectedChartId)!;

        //this is needed to generate data charts below
        //note gets person from ID stored in chart name
        SelectedPerson = _eventsChartViewer.SelectedPerson;

        //put person name into tab title for easy multi-tabbing
        //await _jsRuntime.SetTitle($"Dasa | {SelectedPerson.Name}");
        _pageTitle = $"Dasa | {SelectedPerson.Name}";


        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideLoading();
    }

    private async Task _OnClickCalculate()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!ValidationPassed()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get data from inputs and save it for use by other components
        SelectedPerson = await _peopleSelectorBox.GetSelectedPerson();

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Dasa | {SelectedPerson.Name}";

        //set data into dasa viewer
        dynamic timeRange = ComputeStartEndTimeFromInput();
        var startTime = timeRange.Start;
        var endTime = timeRange.End;

        //generate the events row & time header row
        var inputedEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Sukshma, EventTag.Prana, EventTag.Gochara };

        //pump data into chart
        await _eventsChartViewer.ShowChart(SelectedPerson, startTime, endTime, inputedEventTags);

        //mark page as ready to show results
        _isResultReady = true;

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = SelectedPerson.Id; //save local copy
        _navigation.NavigateTo($"{PageRoute.LifePredictor}/{PersonIdUrl}"); //change url


        //inject selected person into component to show horoscope data
        //do last so that loading box is not closed too soon
        //await horoscopeInfoView?.SetPerson(SelectedPerson);

        _jsRuntime.HideAlert();
    }

    private async Task _OnClickCalculateEasy()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!EasyValidationPassed()) { return; }


        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get data from inputs and save it for use by other components
        SelectedPerson = await _easyPersonSelectorBox.GetSelectedPerson();

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Dasa | {SelectedPerson.Name}";

        //set data into dasa viewer
        dynamic timeRange = AutoCalculateTimeRangeYear();
        var startTime = timeRange.start;
        var endTime = timeRange.end;

        //generate the events row & time header row
        var dasaEventTags = new List<EventTag> { EventTag.Dasa, EventTag.Bhukti, EventTag.Antaram, EventTag.Sukshma, EventTag.Prana, EventTag.Gochara };

        //pump data into chart
        await _eventsChartViewer.ShowChart(SelectedPerson, startTime, endTime, dasaEventTags);

        //mark page as ready to show results
        _isResultReady = true;

        //inject selected person into component to show horoscope data
        //do last so that loading box is not closed too soon
        //await horoscopeInfoView?.SetPerson(SelectedPerson);

        _jsRuntime.HideAlert();

        //LOCAL FUNCTIONS
        object AutoCalculateTimeRangeYear()
        {
            Time start, end;
            var birthDateMonthYear = SelectedPerson.BirthDateMonthYear;

            //note the use of system timezone and not birth timezone
            //birth time is adjusted to show for clients timezone
            var birthTimeStr = $"00:00 {birthDateMonthYear} {Tools.GetSystemTimezoneStr()}";
            var birthTimeClient = new Time(birthTimeStr, SelectedPerson.GetBirthLocation());


            switch (_selectedTimeRange)
            {
                case "Age1to25":
                    start = birthTimeClient;
                    end = birthTimeClient.AddYears(25);
                    return new { start = start, end = end };
                case "Age10to35":
                    start = birthTimeClient.AddYears(10);
                    end = birthTimeClient.AddYears(35);
                    return new { start = start, end = end };
                case "Age25to50":
                    start = birthTimeClient.AddYears(25);
                    end = birthTimeClient.AddYears(50);
                    return new { start = start, end = end };
                case "Age35to60":
                    start = birthTimeClient.AddYears(35);
                    end = birthTimeClient.AddYears(60);
                    return new { start = start, end = end };
                case "Age50to75":
                    start = birthTimeClient.AddYears(50);
                    end = birthTimeClient.AddYears(75);
                    return new { start = start, end = end };
                case "Age60to85":
                    start = birthTimeClient.AddYears(60);
                    end = birthTimeClient.AddYears(85);
                    return new { start = start, end = end };
                case "Age75to100":
                    start = birthTimeClient.AddYears(75);
                    end = birthTimeClient.AddYears(100);
                    return new { start = start, end = end };
                case "FullLife":
                    start = birthTimeClient;
                    end = birthTimeClient.AddYears(100);
                    return new { start = start, end = end };
                default:
                    return new { start = Time.Empty, end = Time.Empty };
            }
        }

    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool ValidationPassed()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }


        //if control reaches here than, it's valid
        return true;
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool EasyValidationPassed()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_easyPersonSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }


        //if control reaches here than, it's valid
        return true;
    }

    private object ComputeStartEndTimeFromInput()
    {
        var startMonthYear = _startTimeSelector.GetSelectedTimeText();
        //note the use of system timezone and not birth
        var x = $"00:00 01/{startMonthYear} {Tools.GetSystemTimezoneStr()}";
        var startTime = new Time(x, SelectedPerson.GetBirthLocation());

        var endMonthYear = _endTimeSelector.GetSelectedTimeText();
        //note the use of system timezone and not birth
        var y = $"11:59 {GetLastDay(endMonthYear)}/{endMonthYear} {Tools.GetSystemTimezoneStr()}";
        var endTime = new Time(y, SelectedPerson.GetBirthLocation());

        return new { Start = startTime, End = endTime };

        //gets last day of any month at any time
        int GetLastDay(string monthYearText)
        {
            //split month and year
            string[] splited = monthYearText.Split('/');
            var month = int.Parse(splited[0]);
            var year = int.Parse(splited[1]);

            int daysInMonth = DateTime.DaysInMonth(year: year, month: month);
            return daysInMonth;

        }
    }


    /// <summary>
    /// Load chart name list when user clicks saved tab, if none show message to user
    /// </summary>
    private async Task OnClickSavedTab()
    {
        await _jsRuntime.ShowLoading();

        //reload list before showing
        //load a list of saved charts
        _allChartList = await WebsiteTools.GetSavedChartNameList();

        //if no saved charts let user know
        if (!_allChartList.Any())
        {
            await _jsRuntime.ShowAlert("info", "No saved charts found, click \"Save to Cloud\" to add new.", false, 3000);
        }

        _jsRuntime.HideLoading();

    }

    private static string GetFriendlyChartName(string rawName)
    {
        //get data out
        var split = rawName.Split("|");
        var hash = split[0];
        var date = split[1];
        var keyword = split[2];
        var personName = split[3];

        //construct new name
        return $"{personName} - {date}";
    }
}