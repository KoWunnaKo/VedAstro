@attribute [Route(PageRoute.PersonList)]

@using VedAstro.Library


<PageTitle>Person List</PageTitle>

<PageTop Title="Person List" IconName="fluent:people-list-20-filled">
    <Description>All person profiles in your account, you can also add or edit persons.</Description>
    <ButtonsRow>
        <IconButton IconName="ant-design:user-add-outlined" ButtonText="Add Person" ClickUrl="@PageRoute.AddPerson"></IconButton>
        <IconButton IconName="flat-color-icons:calculator" ButtonText="Calculators" ClickUrl="@PageRoute.CalculatorList"></IconButton>
    </ButtonsRow>
</PageTop>

@*dont wrap table, looks untidy*@
<style>
    th {
        white-space: nowrap;
    }
    td {
        white-space: nowrap;
    }
</style>


@if (_isReady)
{
    <table class="table table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Birth Date & Time</th>
                <th>Location</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @for (int index = 0; index < _personListAsync.Count; index++)
            {
                <tr>
                    @*only make the name click able*@
                    <td><PersonTooltip Person="_personListAsync[index]" /></td>
                    <td>@_personListAsync[index].BirthTimeString</td>
                    <td>@_personListAsync[index].GetBirthLocation().ToString().Truncate(30)</td> @*we don't need whole location*@
                    <td @ref="tempRef[index]">@TippyfyNotes(_personListAsync[index],index)</td> @*make sure doesn't go overboard long, cut beyond*@
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="fw-bold">No person profiles found.</p>
    <br />
    <p>Possible reasons:</p>
    <ol>
        <li><BoldLink OpenInNewTab="false" URL="@PageRoute.AddPerson">Add Person</BoldLink> first, then it will appear here</li>
        <li>Make sure you're "Log In" into correct account</li>
    </ol>
}


@code {

    private ElementReference[] tempRef = new ElementReference[1000];
    private List<Person> _personListAsync = new List<Person>();
    private bool _isReady = false;

    protected override async Task OnInitializedAsync()
    {
        await GenerateTable();
    }

    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task GenerateTable()
    {
        await _jsRuntime.ShowLoading();

        _isReady = false;

        //get all people from API server
        //auto checks if people list already loaded before
        _personListAsync = await AppData.API.GetPersonList();

        _isReady = true;

        _jsRuntime.HideAlert();
    }


    private void PersonNameClicked(Person person)
    {
        _navigation.NavigateTo($"{PageRoute.PersonEditor}/{person.Id}");
    }

    private IDictionary<ElementReference, string> TippNoteElmList = new Dictionary<ElementReference, string>();

    private string TippyfyNotes(Person person, int indexOfNoteElm)
    {
        //get reference to the element were tippy needs to shine
        var elementReference = tempRef[indexOfNoteElm];

        //make a copy for later hooking with Tippy JS
        TippNoteElmList[elementReference] = person.Notes;

        return person.Notes.Truncate(16) ?? "";
    }


    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);

    private async Task _OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            //inject for each element one by one
            //done here because only element in ready in DOM to be used by Tippy
            foreach (var noteElemRef in TippNoteElmList)
            {
                var fullNoteText = noteElemRef.Value; //what to inject
                var elemRef = noteElemRef.Key;  //where to inject

                //hook on tooltip
                var tooltipSettings =
                    new
                    {
                        content = fullNoteText,
                        theme = "light",
                        allowHTML = true,
                        arrow = true,
                        interactive = true //so that can click button
                    };

                _jsRuntime.Tippy(elemRef, tooltipSettings);

            }
        }
    }


}