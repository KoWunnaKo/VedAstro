@using VedAstro.Library
@using System.Xml.Linq
@attribute [Route(PageRoute.SearchResult)]

<PageTitle>@_pageTitle</PageTitle>

<PageTop Title="Search Astrology" IconName="flat-color-icons:fine-print" IconSize="60">
    <Description>Search all astrological combination or predictions that have been programmed into VedAstro</Description>
</PageTop>

@if (_resultReady)
{
    <h4 class="mb-3">Found "@resultCount" results for "@SearchText"</h4>

    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="nav-horoscope-tab" data-bs-toggle="tab" data-bs-target="#nav-horoscope" type="button" role="tab" aria-controls="nav-horoscope" aria-selected="true">
                Horoscope Predictions <HelpIconTooltip HelpText="@HelpText.SearchPredictions" SmallIcon="true" /> - @foundPrediction.Count()
            </button>
            <button class="nav-link" id="nav-reference-tab" data-bs-toggle="tab" data-bs-target="#nav-reference" type="button" role="tab" aria-controls="nav-reference" aria-selected="false">
                Reference <HelpIconTooltip HelpText="@HelpText.SearchReference" SmallIcon="true"/> - @foundReference.Count()
            </button>
            <button class="nav-link" id="nav-muhurtha-tab" data-bs-toggle="tab" data-bs-target="#nav-muhurtha" type="button" role="tab" aria-controls="nav-muhurtha" aria-selected="false">
                Muhurtha Events <HelpIconTooltip HelpText="@HelpText.SearchEvents" SmallIcon="true"/> - @foundEvents.Count()
            </button>
        </div>
    </nav>
    <div class="tab-content border" id="nav-tabContent">
        <div class="tab-pane fade" id="nav-reference" role="tabpanel" aria-labelledby="nav-reference-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundReference)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="tab-pane fade show active" id="nav-horoscope" role="tabpanel" aria-labelledby="nav-horoscope-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundPrediction)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Nature")?.Value  @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="tab-pane fade" id="nav-muhurtha" role="tabpanel" aria-labelledby="nav-muhurtha-tab">
            <div class="vstack gap-4 py-2">
                @foreach (var prediction in foundEvents)
                {
                    <div class="card shadow">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Nature")?.Value  @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

}
else
{
    <h4>No results found. Try fewer keywords for more results.</h4>
}


@code {

    private string _pageTitle = "Search";


    public string? SearchText = "";

    private int resultCount = 0;
    private bool _resultReady = false;
    private bool filesLoaded = false;


    IEnumerable<XElement> foundPrediction = new List<XElement>();
    IEnumerable<XElement> foundEvents = new List<XElement>();
    IEnumerable<XElement> foundReference = new List<XElement>();


    //makes this page instance available to others
    protected override void OnInitialized() => AppData.SearchPage = this;


    private async Task LoadFiles()
    {
        //this data is used later search for fast loading
        AppData.HoroscopeDataList = await WebsiteTools.GetXmlFile("data/HoroscopeDataList.xml");
        AppData.EventDataList = await WebsiteTools.GetXmlFile("data/EventDataList.xml");
        AppData.ReferenceList = await WebsiteTools.GetXmlFile("data/ReferenceList.xml");

        //mark as loaded so on next search won't reload
        filesLoaded = true;

    }

    /// <summary>
    /// does the search
    /// </summary>
    public async Task Search(string searchText)
    {
        await _jsRuntime.ShowLoading();

        //only load the xml files if not yet loaded
        if (!filesLoaded) { await LoadFiles(); }

        //little time for loading to pop
        //note: without it, no loading
        await Task.Delay(250);

        //show search text
        SearchText = searchText;

        //put search text  into tab title for easy multi-tabbing
        _pageTitle = $"Search | {SearchText}";


        //search file
        var horoscopeDataListCached = await AppData.GetHoroscopeDataListCached();
        foundPrediction = horoscopeDataListCached?.Where(IsFound) ?? Array.Empty<XElement>();
        foundEvents = AppData.EventDataList.Where(IsFound);
        foundReference = AppData.ReferenceList.Where(IsFound);

        //show search result count
        resultCount = foundPrediction.Count() + foundEvents.Count();

        //mark as ready to show user
        _resultReady = true;

        //needed to make changes appear
        StateHasChanged();

        _jsRuntime.HideLoading();

    }


    /// <summary>
    /// checks x element for matching keyword
    /// note: for speed purposes we stick with xelement
    /// </summary>
    private bool IsFound(XElement x)
    {
        //convert the event data to string form
        //note: all 1st level children are converted
        var evenDataXmlString = "";
        foreach (var xElement in x.Elements())
        {
            //only name make format it first
            var text = "";
            if (xElement.Name == "Name")
            {
                text = Format.FormatName(xElement?.Value ?? "");
            }
            else
            {
                text = $" {xElement.Value}";
            }
            evenDataXmlString += text;
        }

        //convert to lower case and do basic word match
        return evenDataXmlString.ToLower().Contains(SearchText.ToLower());
    }


}
