@using VedAstro.Library
@using System.Xml.Linq
@attribute [Route(PageRoute.Contact)]

<PageTitle>Contact</PageTitle>

<PageTop Title="Contact us" IconName="fluent:chat-mail-20-filled">
    <Description>Report a bug, suggest a feature or just say Hi</Description>
</PageTop>


<div class="d-flex flex-wrap">
    @*Default hidden Thank you message*@
    <div style="display: none;" @ref="_thankYouMessageElement">
        <h3>
            Thank you for your message.<br />
            We'll reply soon.
        </h3>
    </div>
    <div class="vstack gap-3 me-5 mb-4" style="max-width: 300px">

        <div @ref="_messageFormElement" class="vstack gap-2" style="max-width: @GR.W667px;">
            <div>
                <label for="emailInputId">Email</label>
                <input @bind="_emailInput" type="text" id="emailInputId" class="form-control" placeholder="john@example.com">
            </div>
            <div>
                <label for="messageInputId">Message</label>
                <textarea style="min-height: 132px;" class="form-control" @bind="_messageInput" id="messageInputId" placeholder="Hi, this is a short message."></textarea>
            </div>
            <IconButton SmallSize="true" OnClickCallback="@OnClickSendButton" ButtonText="Send" IconName="bi:send-check" />
        </div>
    </div>
    @*STACK BOXES ON RIGHT*@
    <div class="w-50">
        <InfoBox MaxWidth="365" IsNewTabOpen="true" FullWidth="@true" Title="WhatsApp" ClickUrl="@URL.WhatsAppContact" Description="Call or chat with us." IconName="logos:whatsapp-icon" />
        <InfoBox MaxWidth="365" IsNewTabOpen="true" FullWidth="@true" Title="Email" ClickUrl="@URL.EmailToClick" Description="contact@vedastro.org" IconName="flat-color-icons:address-book" Color="success" />
        <InfoBox MaxWidth="365" IsNewTabOpen="true" FullWidth="@true" Title="Telegram" ClickUrl="@URL.TelegramContact" Description="Call or chat with us." IconName="logos:telegram" />
    </div>
</div>



@code {

    private string? _messageInput;
    private string? _emailInput;
    private ElementReference _messageFormElement;
    private ElementReference _thankYouMessageElement;



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    private async void OnClickSendButton() => await InvokeAsync(async () => await SendMessage()).Try(_jsRuntime);


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task SendMessage()
    {
        //loading box show
        await _jsRuntime.ShowLoading();

        //package message data to be sent
        var textXml = new XElement("Text", _messageInput);
        var emailXml = new XElement("Email", _emailInput);
        var userIdXml = new XElement("UserId", AppData.CurrentUser?.Id);
        var visitorIdXml = new XElement("VisitorId", AppData.VisitorId);
        var messageXml = new XElement("Message", userIdXml, visitorIdXml, emailXml, Tools.TimeStampSystemXml, Tools.TimeStampServerXml, textXml);

        //send message to API server
        await ServerManager.WriteToServerXmlReply(AppData.URL.AddMessageApi, messageXml);

        //hide message form
        await _jsRuntime.Hide(_messageFormElement);
        //show thank you message
        await _jsRuntime.Show(_thankYouMessageElement);

        //hide loading box
        _jsRuntime.HideAlert();
    }
}
