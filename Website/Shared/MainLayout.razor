@inherits LayoutComponentBase
@using VedAstro.Library
@using System.Xml.Linq
@using Website.Pages
@using System.Text.Json
@using Library.API
@using Newtonsoft.Json.Linq
@using Tools = Library.API.Tools


@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@

@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{
    <!--only wrap in mobile screen-->
    <div class="row flex-md-nowrap">

        <!-- DESKTOP ONLY : SIDEBAR -->
        <div class="col-auto align-items-start d-none d-md-block">
            <!--only visible in Desktop-->
            <div class="vstack gap-2 mb-3 rounded-3 border shadow sticky-md-top p-md-3 bg-white">
                <input @ref="_searchInput" @onkeyup="OnKeyUpSearchBar" type="text" class="form-control" placeholder="Search...">
                <SideBarButtons />
            </div>

            <!-- DEPLOYMENT STAMP : Not visible in mobile, no space to joke around -->
            <div class="sticky-bottom position-fixed mb-3 ms-5" style="color:#969696; font-size: 8px; z-index: 1;">
                @*stack below other elms*@
                <div style="cursor: pointer;" @onclick="()=>_navigation.NavigateTo(PageRoute.MadeOnEarth)" class="hstack gap-1">
                    <span class="iconify" data-icon="ion:earth" data-width="10"></span>
                    <span>Made on Earth</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="bi:rocket-fill" data-width="10"></span>
                    <!-- Stamped build version during deployment, used to identify code in the WILD -->
                    <span>@ThisAssembly.Version</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="material-symbols:copyright-outline" data-width="11"></span>
                    <!-- Stamped build version during deployment, used to identify code in cloud -->
                    <span>2014 - 2023 VedAstro</span>
                </div>
                <div @onclick="OnClickStamp" class="mt-1">
                    <img src="images/ce-fcc-recycle.svg">
                </div>
            </div>
        </div>

        <!-- MOBILE ONLY : SIDEBAR -->
        <div class="col-auto d-md-none">
            <nav class="navbar fixed-top" style="background:#1877f2;">
                <div class="container-fluid">
                    <a class="navbar-brand text-white ps-3 fs-4" href="@PageRoute.Home">VedAstro</a>
                    <button class="navbar-toggler text-white border-white" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                        <Icon IconName="material-symbols:menu-open-rounded" Size="30" />
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                        <div class="offcanvas-header">
                            <h6 class="offcanvas-title" id="offcanvasNavbarLabel">Mobile Menu</h6>
                            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </div>
                        <div class="offcanvas-body">
                            <div class="d-flex flex-wrap gap-2 mb-2 p-2 rounded-3 border shadow"><TopBarButtons /></div>
                            <hr />
                            <div class="vstack gap-2 mb-2 p-2 rounded-3 border shadow"><SideBarButtons /></div>
                        </div>
                    </div>
                </div>
            </nav>
        </div>

        <!-- CONTENT + REF BUTTONS -->
        <!-- in mobile push down to make room for mobile menu-->
        <div class="col mt-sm-5 mt-md-0">

            <!-- REFERENCE BUTTONS : buttons placed here are
            linked to places not needed all the time, like About and Docs -->
            <!--only visible in Desktop-->
            <div style="min-width:954px;" class="rounded-3 mb-4 p-2 border shadow d-none d-md-flex gap-2 justify-content-between bg-white">
                <TopBarButtons />
            </div>

            <!-- PAGE CONTENT INSERTED HERE -->
            <div>@Body</div>

            <!-- FOOTER LINE AND SPACING -->
            <hr class="mt-5" style="margin-bottom:@GR.W157px;">
        </div>
    </div>

}



@code
{
    //IJSObjectReference? _module;
    bool _mainPageInitDone;
    private ElementReference _searchInput;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync(JS.InitErrorCatcher);

            //log visit only 1 once when page is rendered
            await WebLogger.Visitor(_jsRuntime);
        }
    }

    private async Task _OnInitialized()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded


        //1: do little check to make sure all functions in Interop is accounted for
        await InteropHealthCheck();

        //2: create url based on beta or stable
        AppData.URL = new URL(WebsiteTools.GetIsBetaRuntime());

        //3: to be accessed by classes
        AppData.HttpClient = _client;

        //4: used later to create HTTP client with correct base address
        AppData.BaseAddress = new Uri(_navigation.BaseUri);

        //5: get visitor ID if available
        AppData.VisitorId = await WebsiteTools.TryGetVisitorId(_jsRuntime);

        //6: retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //7: prepare server communicator
        AppData.API = new VedAstroAPI(AppData.CurrentUser.Id, AppData.VisitorId, _jsRuntime, AppData.URL);

        //ask server to prepare person list, will be available instantly later when user needs it
        await AppData.API.PreparePersonList();

        //get location from IP
        AppData.ClientLocation = await GeoLocation.FromIpAddress();

        //log it
        WebLogger.Data(AppData.ClientLocation.ToString());

        //other components can start loading now
        _mainPageInitDone = true;
    }

    /// <summary>
    /// Checks if all functions expected by Blazor is defined Interop and vice versa
    /// This check maintains a clean relationship, self diagnosis system
    /// </summary>
    /// <returns></returns>
    private async Task InteropHealthCheck()
    {
        //get all JS functions in Interop.js
        var functionsListRaw = await _jsRuntime.InvokeAsync<JsonElement>(JS.GetInteropFuncList);
        List<string> jsList = functionsListRaw.EnumerateArray().Select(funcName => funcName.ToString()).ToList();

        //calls in blazor would be more since there direct calls to libs aswell
        List<string> blazorList = typeof(JS).GetFields().Select(prop => prop.Name).ToList();

        //just make sure every call in Interop.js is accounted for
        foreach (var jsFunc in jsList)
        {
            //JS function name should exist in Blazor list
            //NOTE : meaning declared or expecting to be called, though not, just good business policy
            var noneFound = blazorList.FindAll(blazFunc => blazFunc.Equals(jsFunc)).Count < 1;

            //raise alarm
            if (noneFound)
            {
                Console.WriteLine($"BLZ : Interop health check FAIL > {jsFunc}");
                throw new Exception($"Interop JS Function not found in Blazor : {jsFunc}");
            }
        }

        Console.WriteLine("Interop health check PASS");

    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml)) ?? throw new Exception("userDataXml failed to parse!");
        }
    }

    /// <summary>
    /// Handle when user uses the Search
    /// </summary>
    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //only start search when user press Enter
        if (keyEventArgs.Key != "Enter") return;

        await PerformSearch();

    }

    private async Task PerformSearch()
    {
        //get search text
        var text = await _jsRuntime.GetValue(_searchInput);

        //log
        WebLogger.Data("Search: " + text);

        //go home when no text
        if (text.Length == 0) { _navigation.NavigateTo(PageRoute.Home); return; }

        //show search page & input the search text
        _navigation.NavigateTo(PageRoute.SearchResult);
        await Task.Delay(250);//little time for page to load (needed else fails)
        await AppData.SearchPage.Search(text);
    }

    private async Task OnClickSearchIcon() => await PerformSearch();


    private async Task OnClickStamp()
    {
        //count click
        AppData.StampClickCount++;

        switch (AppData.StampClickCount)
        {
            case 2: await _jsRuntime.ShowAlert("success", $"You clicked this 2x times, why?", true); break;
            case 4: await _jsRuntime.ShowAlert("success", $"Stop clicking! There is no \"Cake\" here.", true); break;
            case 6: _navigation.NavigateTo(PageRoute.EasterEgg, true); break;
        }
    }
}



